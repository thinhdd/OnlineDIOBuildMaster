//
// DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED USING AndroidAnnotations.
//


package com.qsoft.pilotproject.data.rest;

import java.util.Collections;
import com.qsoft.pilotproject.data.model.dto.ResponseComment;
import com.qsoft.pilotproject.data.model.dto.ResponseListFeed;
import com.qsoft.pilotproject.data.model.dto.ResponseProfile;
import com.qsoft.pilotproject.data.model.dto.SignInDTO;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.converter.FormHttpMessageConverter;
import org.springframework.http.converter.ResourceHttpMessageConverter;
import org.springframework.http.converter.StringHttpMessageConverter;
import org.springframework.http.converter.json.GsonHttpMessageConverter;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestTemplate;

public class OnlineDioRestClient_
    implements OnlineDioRestClient
{

    private RestTemplate restTemplate;
    private String rootUrl;

    public OnlineDioRestClient_() {
        restTemplate = new RestTemplate();
        restTemplate.getMessageConverters().add(new MappingJackson2HttpMessageConverter());
        restTemplate.getMessageConverters().add(new FormHttpMessageConverter());
        restTemplate.getMessageConverters().add(new GsonHttpMessageConverter());
        restTemplate.getMessageConverters().add(new StringHttpMessageConverter());
        restTemplate.getMessageConverters().add(new ResourceHttpMessageConverter());
        rootUrl = "http://113.160.50.84:1009/testing/ica467/trunk/public/";
    }

    @Override
    public RestTemplate getRestTemplate() {
        return restTemplate;
    }

    @Override
    public void setRestTemplate(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
    }

    @Override
    public ResponseComment getComments(long soundId, String limit, String offset, String updateAt) {
        java.util.HashMap<String, Object> urlVariables = new java.util.HashMap<String, Object>();
        urlVariables.put("soundId", soundId);
        urlVariables.put("limit", limit);
        urlVariables.put("offset", offset);
        urlVariables.put("updateAt", updateAt);
        HttpHeaders httpHeaders = new HttpHeaders();
        httpHeaders.setAccept(Collections.singletonList(MediaType.parseMediaType("application/json")));
        HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
        return restTemplate.exchange(rootUrl.concat("comment-rest?sound_id={soundId}&limit={limit}&offset={offset}&updated_at={updateAt}"), HttpMethod.GET, requestEntity, ResponseComment.class, urlVariables).getBody();
    }

    @Override
    public String check() {
        HttpHeaders httpHeaders = new HttpHeaders();
        httpHeaders.setAccept(Collections.singletonList(MediaType.parseMediaType("*/*")));
        HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
        return restTemplate.exchange(rootUrl.concat("home-rest?limit=1"), HttpMethod.GET, requestEntity, String.class).getBody();
    }

    @Override
    public ResponseListFeed getFeeds(String limit, String offset, String timeFrom, String timeTo) {
        java.util.HashMap<String, Object> urlVariables = new java.util.HashMap<String, Object>();
        urlVariables.put("limit", limit);
        urlVariables.put("offset", offset);
        urlVariables.put("timeFrom", timeFrom);
        urlVariables.put("timeTo", timeTo);
        HttpHeaders httpHeaders = new HttpHeaders();
        httpHeaders.setAccept(Collections.singletonList(MediaType.parseMediaType("application/json")));
        HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
        return restTemplate.exchange(rootUrl.concat("home-rest?limit={limit}&offset={offset}&time_from={timeFrom}&time_to={timeTo}"), HttpMethod.GET, requestEntity, ResponseListFeed.class, urlVariables).getBody();
    }

    @Override
    public ResponseProfile getProfile(long userId) {
        java.util.HashMap<String, Object> urlVariables = new java.util.HashMap<String, Object>();
        urlVariables.put("userId", userId);
        HttpHeaders httpHeaders = new HttpHeaders();
        httpHeaders.setAccept(Collections.singletonList(MediaType.parseMediaType("application/json")));
        HttpEntity<Object> requestEntity = new HttpEntity<Object>(httpHeaders);
        return restTemplate.exchange(rootUrl.concat("user-rest/{userId}"), HttpMethod.GET, requestEntity, ResponseProfile.class, urlVariables).getBody();
    }

    @Override
    public SignInDTO signIn(MultiValueMap data) {
        HttpHeaders httpHeaders = new HttpHeaders();
        httpHeaders.setAccept(Collections.singletonList(MediaType.parseMediaType("application/json")));
        HttpEntity<MultiValueMap> requestEntity = new HttpEntity<MultiValueMap>(data, httpHeaders);
        return restTemplate.exchange(rootUrl.concat("auth-rest"), HttpMethod.POST, requestEntity, SignInDTO.class).getBody();
    }

    @Override
    public void updateProfile(java.util.HashMap profile, Long userId) {
        java.util.HashMap<String, Object> urlVariables = new java.util.HashMap<String, Object>();
        urlVariables.put("userId", userId);
        HttpHeaders httpHeaders = new HttpHeaders();
        HttpEntity<java.util.HashMap> requestEntity = new HttpEntity<java.util.HashMap>(profile, httpHeaders);
        restTemplate.exchange(rootUrl.concat("user-rest/{userId}"), HttpMethod.PUT, requestEntity, null, urlVariables);
    }

}
